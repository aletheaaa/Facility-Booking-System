version: '3.8'
networks:
  access-booking-network:
    driver: bridge
  update-booking-network:
    driver: bridge
  make-bookings-network:
    driver: bridge
  cancel-booking-network:
  make-booking-network:
  my-network:

services:
  #################################
  # notif: The Notif microservice
  #################################
  notif:
    build: 
      context: ./notification
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    restart: always
    networks:
      - my-network
      - cancel-booking-network
      - update-booking-network
      - make-bookings-network
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics ping -q"]
      interval: 10s
      retries: 20

  #################################
  # rabbitmq: The RabbitMQ image
  #################################
  rabbitmq:
    image: rabbitmq:3-management
    hostname: esd-rabbit
    restart: always
    networks:
      - my-network
      - cancel-booking-network
      - update-booking-network
      - make-bookings-network
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      retries: 15
  
  ################################
  # BookingLogs: The BookingLogs microservice
  #################################
  bookinglogs:
    image: aletheatohh/bookinglogs:1.0
    build: 
      context: ./bookingLogs
      dockerfile: Dockerfile
    ports:
      - "5001:5001"
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/bookinglogs
    networks:
      - access-booking-network
      - update-booking-network
      - make-bookings-network
      - cancel-booking-network
  
  #################################
  # Payment: The Payment microservice
  #################################
  payment:
    build: 
      context: ./payment
      dockerfile: Dockerfile
    image: aletheatohh/payment:1.0
    restart: always
    networks:
      - update-booking-network
      - make-bookings-network
      - cancel-booking-network
    environment:
      dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/accounts
    ports:
      - "5002:5002"
  
  #################################
  # Room: The Room microservice
  #################################
  room:
    image: aletheatohh/room:1.0
    restart: always
    environment:
      MYSQL_DB_LINK: jdbc:mysql://mysql-room:3306/roomdb
    depends_on:
      - db
    links:
      - db
    ports:
      - "8080:8080"
    networks:
      - access-booking-network
      - cancel-booking-network
      - update-booking-network

  #################################
  # MySQL: The official image for MySQL
  #################################
  db:
    container_name: mysql-room
    image: mysql
    restart: always
    environment:
      MYSQL_PASSWORD: ESDT5
      MYSQL_DATABASE: roomdb
      MYSQL_ROOT_PASSWORD: ESDT5
      MYSQL_USER: IS213Room
    expose:
      - "3306"
    networks:
      - access-booking-network
      - cancel-booking-network
      - update-booking-network

  ################################
  # updateBooking: The updateBooking microservice
  ################################
  updatebooking:
    image: aletheatohh/updatebooking:1.0
    restart: always
    build:
      context: ./updateBooking
      dockerfile: Dockerfile
    ports:
      - "5003:5003"
    networks:
      - update-booking-network
    depends_on:
      - room
      - notif
      - payment
      - bookinglogs

  # #################################
  # # accesstakenbooking: The accesstakenbooking microservice
  # #################################
  accesstakenbooking:
    image: aletheatohh/accesstakenbooking:1.0
    restart: always
    build:
      context: ./accessTakenBooking
      dockerfile: Dockerfile
    ports:
      - "5004:5004"
    networks:
      - access-booking-network
      - make-bookings-network
    depends_on:
      - db
      - room
      - bookinglogs

  #################################
  # cancelbooking: The cancelbooking microservice
  #################################
  cancelbooking:
    image: aletheatohh/cancelbooking:1.0
    restart: always 
    build:
      context: ./cancelBooking
      dockerfile: Dockerfile
    ports:
      - "5005:5005"
    networks:
      - cancel-booking-network
    depends_on:
      - notif
      - payment
      - bookinglogs
      - room

  #################################
  # makebooking: The makeBooking microservice
  #################################
  makebooking:
    image: aletheatohh/makebooking:1.0
    restart: always
    build:
      context: ./makeBooking
      dockerfile: Dockerfile
    ports:
      - "5006:5006"
    networks:
      - make-booking-network
      - access-booking-network
    depends_on:
      - notif
      - payment
      - bookinglogs
      - accesstakenbooking